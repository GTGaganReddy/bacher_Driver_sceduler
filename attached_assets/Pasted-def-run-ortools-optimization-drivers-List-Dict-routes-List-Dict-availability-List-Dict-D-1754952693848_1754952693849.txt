def run_ortools_optimization(drivers: List[Dict], routes: List[Dict], availability: List[Dict]) -> Dict:
    """
    Run OR-Tools optimization for driver-route assignment
    
    UPDATED: Uses monthly_hours from driver details - removed daily capacity calculation
    Works directly with monthly capacity for simpler and more accurate optimization
    """
    try:
        # Create the solver
        solver = pywraplp.Solver.CreateSolver('SCIP')
        if not solver:
            return {'error': 'Failed to create OR-Tools solver'}
        
        # Parse drivers from database format
        driver_info = {}
        for driver in drivers:
            driver_id = driver.get('driver_id') or driver.get('id')
            driver_name = driver.get('name', 'Unknown Driver')
            
            # Parse JSON details field
            details = parse_json_details(driver.get('details', ''))
            monthly_hours_str = details.get('monthly_hours', '160:00')
            monthly_hours = parse_time_string_to_hours(monthly_hours_str)
            
            driver_info[driver_id] = {
                'name': driver_name,
                'monthly_hours': monthly_hours,
                'type': details.get('type', 'unknown')
            }
        
        # Parse routes from database format
        route_info = {}
        routes_by_date = {}  # Group routes by date for same-day constraint
        
        for route in routes:
            route_id = route.get('route_id') or route.get('id')
            route_name = route.get('route_name') or route.get('name', 'Unknown Route')
            route_date = str(route.get('date', ''))
            day_of_week = route.get('day_of_week', 'unknown')
            
            # Parse JSON details field
            details = parse_json_details(route.get('details', ''))
            duration_str = details.get('duration', '8:00')
            duration_hours = parse_time_string_to_hours(duration_str)
            
            route_code = details.get('route_code', route_name)
            
            route_info[route_id] = {
                'name': route_name,
                'route_code': route_code,
                'date': route_date,
                'duration_hours': duration_hours,
                'day_of_week': day_of_week,
                'route_type': details.get('type', 'unknown')
            }
            
            # Group routes by date for same-day constraint
            if route_date not in routes_by_date:
                routes_by_date[route_date] = []
            routes_by_date[route_date].append(route_id)
        
        # Parse availability from database format
        driver_availability = {}
        driver_available_days = {}  # Track number of available days per driver
        
        for avail in availability:
            driver_id = avail.get('driver_id')
            date_str = str(avail.get('date', ''))
            is_available = avail.get('available', False)
            
            if driver_id not in driver_availability:
                driver_availability[driver_id] = {}
                driver_available_days[driver_id] = 0
            
            driver_availability[driver_id][date_str] = {
                'available': is_available,
                'shift_preference': avail.get('shift_preference', 'any')  # Optional field
            }
            
            # Count available days for this driver
            if is_available:
                driver_available_days[driver_id] += 1
        
        # Find special assignments
        klagenfurt_driver_id = None
        saturday_252sa_route_id = None
        
        # Find "Klagenfurt - Samstagsfahrer" driver
        for driver_id, driver_data in driver_info.items():
            if driver_data['name'] == "Klagenfurt - Samstagsfahrer":
                klagenfurt_driver_id = driver_id
                break
        
        # Find Saturday route 252SA
        for route_id, route_data in route_info.items():
            route_name = route_data['name']
            day_of_week = route_data['day_of_week']
            
            if route_name == '252SA' and day_of_week == 'saturday':
                saturday_252sa_route_id = route_id
                logger.info(f"Found Saturday route 252SA: route_id={route_id}, date={route_data['date']}")
                break
        
        # Create decision variables: x[driver_id, route_id] = 1 if driver assigned to route
        x = {}
        for driver_id in driver_info.keys():
            for route_id, route_data in route_info.items():
                route_date = route_data['date']
                
                # Only create variable if driver is available on route date
                if (driver_id in driver_availability and 
                    route_date in driver_availability[driver_id] and 
                    driver_availability[driver_id][route_date]['available']):
                    
                    x[driver_id, route_id] = solver.IntVar(0, 1, f'x_{driver_id}_{route_id}')
        
        # Constraint 1: Each route assigned to exactly one driver (or none if no one available)
        for route_id in route_info.keys():
            constraint_vars = []
            for driver_id in driver_info.keys():
                if (driver_id, route_id) in x:
                    constraint_vars.append(x[driver_id, route_id])
            
            if constraint_vars:
                solver.Add(sum(constraint_vars) <= 1)
        
        # Constraint 2: Each driver can only be assigned ONE route per day
        for driver_id in driver_info.keys():
            for date_str, route_ids_on_date in routes_by_date.items():
                # Check if driver is available on this date
                if (driver_id in driver_availability and 
                    date_str in driver_availability[driver_id] and 
                    driver_availability[driver_id][date_str]['available']):
                    
                    # Get all variables for this driver on this date
                    same_day_vars = []
                    for route_id in route_ids_on_date:
                        if (driver_id, route_id) in x:
                            same_day_vars.append(x[driver_id, route_id])
                    
                    # Constraint: sum of assignments for this driver on this day <= 1
                    if same_day_vars:
                        solver.Add(sum(same_day_vars) <= 1)
        
        # Constraint 3: Driver cannot exceed monthly available hours
        for driver_id, driver_data in driver_info.items():
            monthly_hours = driver_data['monthly_hours']
            constraint_vars = []
            route_hours = []
            
            for route_id, route_data in route_info.items():
                if (driver_id, route_id) in x:
                    constraint_vars.append(x[driver_id, route_id])
                    route_hours.append(route_data['duration_hours'])
            
            if constraint_vars:
                solver.Add(sum(var * hours for var, hours in zip(constraint_vars, route_hours)) <= monthly_hours)
        
        # Constraint 4: Saturday route 252SA must be assigned to Klagenfurt - Samstagsfahrer
        if klagenfurt_driver_id and saturday_252sa_route_id:
            if (klagenfurt_driver_id, saturday_252sa_route_id) in x:
                solver.Add(x[klagenfurt_driver_id, saturday_252sa_route_id] == 1)
                logger.info("Added constraint: Saturday route 252SA assigned to Klagenfurt - Samstagsfahrer")
            else:
                logger.warning("Cannot assign 252SA to Klagenfurt - Samstagsfahrer (driver not available)")
        else:
            logger.warning(f"Special assignment check - Klagenfurt driver found: {klagenfurt_driver_id is not None}, Saturday 252SA route found: {saturday_252sa_route_id is not None}")
        
        # UPDATED OBJECTIVE: Simplified to focus on monthly capacity and availability
        objective_terms = []
        
        for driver_id, driver_data in driver_info.items():
            monthly_hours = driver_data['monthly_hours']
            available_days = driver_available_days.get(driver_id, 0)
            
            for route_id, route_data in route_info.items():
                if (driver_id, route_id) in x:
                    # Weight calculation based on:
                    # 1. Monthly capacity (higher = better for workload distribution)
                    # 2. Available days (more days = more flexible)
                    
                    capacity_weight = monthly_hours * 5  # Favor drivers with higher monthly capacity
                    flexibility_weight = available_days * 10  # Favor drivers available more days
                    
                    # Base weight for making assignments
                    assignment_weight = 100
                    
                    total_weight = assignment_weight + capacity_weight + flexibility_weight
                    objective_terms.append(x[driver_id, route_id] * total_weight)
        
        solver.Maximize(sum(objective_terms))
        
        # Solve the problem
        logger.info("Starting OR-Tools solver...")
        status = solver.Solve()
        
        # Process results
        if status == pywraplp.Solver.OPTIMAL or status == pywraplp.Solver.FEASIBLE:
            assignments = {}
            unassigned_routes = []
            total_assignments = 0
            driver_hours_used = {}
            
            # Extract assignments
            for driver_id in driver_info.keys():
                driver_hours_used[driver_id] = 0
                for route_id, route_data in route_info.items():
                    if (driver_id, route_id) in x and x[driver_id, route_id].solution_value() == 1:
                        date_str = route_data['date']
                        route_name = route_data['name']
                        
                        if date_str not in assignments:
                            assignments[date_str] = {}
                        
                        duration_hours = route_data['duration_hours']
                        duration_formatted = f"{int(duration_hours)}:{int((duration_hours % 1) * 60):02d}"
                        
                        assignments[date_str][route_name] = {
                            'driver_name': driver_info[driver_id]['name'],
                            'driver_id': driver_id,
                            'route_id': route_id,
                            'duration_hours': duration_hours,
                            'duration_formatted': duration_formatted
                        }
                        total_assignments += 1
                        driver_hours_used[driver_id] += duration_hours
            
            # Find unassigned routes
            assigned_route_ids = set()
            for date_assignments in assignments.values():
                for route_assignment in date_assignments.values():
                    assigned_route_ids.add(route_assignment['route_id'])
            
            for route_id, route_data in route_info.items():
                if route_id not in assigned_route_ids:
                    unassigned_routes.append({
                        'id': route_id,
                        'name': route_data['name'],
                        'date': route_data['date'],
                        'duration_hours': route_data['duration_hours']
                    })
            
            # Calculate driver utilization based on monthly hours only
            driver_utilization = {}
            for driver_id, driver_data in driver_info.items():
                monthly_hours = driver_data['monthly_hours']
                hours_used = driver_hours_used.get(driver_id, 0)
                available_days = driver_available_days.get(driver_id, 0)
                
                # Calculate utilization against monthly capacity
                utilization_rate = (hours_used / monthly_hours * 100) if monthly_hours > 0 else 0
                
                driver_utilization[driver_id] = {
                    'name': driver_data['name'],
                    'monthly_capacity_hours': monthly_hours,
                    'available_days': available_days,
                    'hours_used': hours_used,
                    'hours_remaining': monthly_hours - hours_used,
                    'utilization_rate': round(utilization_rate, 2)
                }
            
            # Verify special assignment
            special_assignment_status = "Not found"
            if klagenfurt_driver_id and saturday_252sa_route_id:
                for date_assignments in assignments.values():
                    for route_name, assignment_details in date_assignments.items():
                        if (assignment_details['driver_id'] == klagenfurt_driver_id and 
                            assignment_details['route_id'] == saturday_252sa_route_id):
                            special_assignment_status = "Successfully assigned"
                            break
            
            # Calculate statistics
            statistics = {
                'total_assignments': total_assignments,
                'total_routes': len(route_info),
                'unassigned_count': len(unassigned_routes),
                'assignment_rate': round((total_assignments / len(route_info)) * 100, 2) if route_info else 0,
                'objective_value': solver.Objective().Value(),
                'solve_time_ms': solver.WallTime(),
                'driver_utilization': driver_utilization,
                'special_assignment_252sa': special_assignment_status
            }
            
            solver_status = 'OPTIMAL' if status == pywraplp.Solver.OPTIMAL else 'FEASIBLE'
            
            logger.info(f"Optimization completed: {total_assignments}/{len(route_info)} routes assigned")
            logger.info(f"Saturday 252SA assignment: {special_assignment_status}")
            
            return {
                'assignments': assignments,
                'unassigned_routes': unassigned_routes,
                'statistics': statistics,
                'solver_status': solver_status
            }
        
        else:
            error_msg = f"Solver failed with status: {status}"
            logger.error(error_msg)
            return {'error': error_msg}
    
    except Exception as e:
        logger.error(f"OR-Tools optimization error: {str(e)}", exc_info=True)
        return {'error': f"Optimization failed: {str(e)}"}